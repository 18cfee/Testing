Page 8 of "Competitive Programming 3"
<= 10..11 n! n^6
<= 15..18 2^n * n^2
<= 18..22 2^n * n
<=100 n^4
<=400 n^3
<=2K n^2 lg n
<=10K n^2
<=1M n lg n
<=100M n, lg n
<= inf 1
IO bottlenock prevents n>1M for most problems

Array.fill(array, -1);
int: 2,147,483,647, 2^32


    /*n = in.nextInt();
    List<Tuple> array = new ArrayList<Tuple>(n);
        for (int i = 0; i < n; i++) {
        array.add(new Tuple(in.nextInt(),in.nextInt()));
    }
        Collections.sort(array,new Tuple(1,2));*/

////////////////////////////////////////////////////////////////////////////////////////////

// Maybe fix the reader at some point, right now it will not detect that it ran out of integers

////////////////////////Default Dictionary//////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////Return List Prime Factorization////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////

// Copied the reader class from http://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/